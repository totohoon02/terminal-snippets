venv(){
    version=${1:-3.10}

    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        py -$version -m venv .venv
    else
        python$version -m venv .venv
    fi
    activate

    pip install ruff
	lck ruff.toml
	rr
}

activate(){
    if [ -d "./.venv/Scripts/" ]; then
        . .venv/Scripts/activate
    else
        . .venv/bin/activate
    fi
}

requirements(){
    pip install -r requirements.txt
}

freeze(){
    pip freeze > requirements.txt
}

fast(){
	venv
	activate
	pip install fastapi uvicorn injector pytest python-dotenv
	freeze

	# gen dir
	mkdir controller
	mkdir service
	mkdir service/inf
	mkdir tests
	mkdir config

	# .env
	echo '# Store Secret Value here. Not configuration.ini' > .env

	# DI Config
	echo 'from injector import Injector, Module, singleton, provider' > config/depends.py
	echo '' >> config/depends.py
	echo '# inf' >> config/depends.py
	echo 'from config.configurator import Configurator' >> config/depends.py
	echo 'from service.inf.sampleService import SampleService' >> config/depends.py
	echo '' >> config/depends.py
	echo '# static' >> config/depends.py
	echo 'from service.sampleServiceImpl import SampleServiceImpl' >> config/depends.py
	echo '' >> config/depends.py
	echo '' >> config/depends.py
	echo 'class ServiceModule(Module):' >> config/depends.py
	echo '    @singleton' >> config/depends.py
	echo '    @provider' >> config/depends.py
	echo '    def sampleService(self, configurator: Configurator) -> SampleService:' >> config/depends.py
	echo '        return SampleServiceImpl(configurator)' >> config/depends.py
	echo '' >> config/depends.py
	echo '' >> config/depends.py
	echo 'injector = Injector([ServiceModule()])' >> config/depends.py

	# configParser
	echo '[ENV]' > config/configuration.ini
	echo 'env = DEV' >> config/configuration.ini
	echo '' >> config/configuration.ini
	echo '[DEV]' >> config/configuration.ini
	echo 'host = localhost' >> config/configuration.ini
	echo '' >> config/configuration.ini
	echo '[PROD]' >> config/configuration.ini
	echo 'host = prodhost' >> config/configuration.ini
	echo '' >> config/configuration.ini
	echo '[COMMON]' >> config/configuration.ini
	echo 'model = mymodel' >> config/configuration.ini

	# configurator
	echo 'import configparser' > config/configurator.py
	echo '' >> config/configurator.py
	echo 'class Configurator:' >> config/configurator.py
	echo '    def __init__(self):' >> config/configurator.py
	echo '        self.parser = configparser.ConfigParser()' >> config/configurator.py
	echo '        self.parser.read("config/configuration.ini")' >> config/configurator.py
	echo '        self.env = self.parser["ENV"]["env"]' >> config/configurator.py
	echo '' >> config/configurator.py
	echo '        self.configs = self.parser[self.env]' >> config/configurator.py
	echo '' >> config/configurator.py
	echo '    def get_env(self, key: str):' >> config/configurator.py
	echo '        return self.parser[self.env][key]' >> config/configurator.py
	echo '' >> config/configurator.py
	echo '    def get_common(self, key: str):' >> config/configurator.py
	echo '        return self.parser["COMMON"][key]' >> config/configurator.py
	echo '' >> config/configurator.py
	echo '    def get_section(self, section: str, key: str):' >> config/configurator.py
	echo '        return self.parser[section][key]' >> config/configurator.py
	echo '' >> config/configurator.py

	# sample controller
	echo 'from fastapi import APIRouter' > controller/sampleController.py
	echo 'from config.depends import injector' >> controller/sampleController.py
	echo 'from service.inf.sampleService import SampleService' >> controller/sampleController.py
	echo '' >> controller/sampleController.py
	echo 'router = APIRouter(prefix="/hello", tags=["hello"])' >> controller/sampleController.py
	echo '' >> controller/sampleController.py
	echo '# service' >> controller/sampleController.py
	echo 'sampleService = injector.get(SampleService)' >> controller/sampleController.py
	echo '' >> controller/sampleController.py
	echo '' >> controller/sampleController.py
	echo '@router.get("")' >> controller/sampleController.py
	echo 'def hello():' >> controller/sampleController.py
	echo '    return sampleService.hello()' >> controller/sampleController.py

	# sample service
	echo 'from abc import ABC, abstractmethod' > service/inf/sampleService.py
	echo '' >> service/inf/sampleService.py
	echo '' >> service/inf/sampleService.py
	echo 'class SampleService(ABC):' >> service/inf/sampleService.py
	echo '    @abstractmethod' >> service/inf/sampleService.py
	echo '    def hello(self):' >> service/inf/sampleService.py
	echo '        pass' >> service/inf/sampleService.py

	# sample serviceImpl
	echo 'from config.configurator import Configurator' > service/sampleServiceImpl.py
	echo ''
	echo 'from .inf.sampleService import SampleService' >> service/sampleServiceImpl.py
	echo '' >> service/sampleServiceImpl.py
	echo '' >> service/sampleServiceImpl.py
	echo 'class SampleServiceImpl(SampleService):' >> service/sampleServiceImpl.py
	echo '    def __init__(self, configurator: Configurator):' >> service/sampleServiceImpl.py
	echo '        self.configurator = configurator' >> service/sampleServiceImpl.py
	echo '' >> service/sampleServiceImpl.py
	echo '    def hello(self):' >> service/sampleServiceImpl.py
	echo '        return {"host": self.configurator.get("host")}' >> service/sampleServiceImpl.py

	# main.py
	echo 'from fastapi import FastAPI' > main.py
	echo 'from controller import sampleController' >> main.py
	echo '' >> main.py
	echo 'app = FastAPI()' >> main.py
	echo '' >> main.py
	echo 'app.include_router(sampleController.router)' >> main.py

	# sample test
	echo 'class Test_SampleService:' > tests/test_sample.py
	echo '    # this will be succeeded' >> tests/test_sample.py
	echo '    def test_hello_success(self):' >> tests/test_sample.py
	echo '        world = "hello!"' >> tests/test_sample.py
	echo '        assert "hell" in world' >> tests/test_sample.py
	echo '' >> tests/test_sample.py
	echo '    # this will be failed' >> tests/test_sample.py
	echo '    def test_hello_fail(self):' >> tests/test_sample.py
	echo '        world = "hello!"' >> tests/test_sample.py
	echo '        assert "hell" not in world' >> tests/test_sample.py

	# __init__
	echo '' > controller/__init__.py
	echo '' > service/__init__.py
	echo '' > service/inf/__init__.py
	echo '' > config/__init__.py

	rr
}

run() {
    port=${1:-8000}
    uvicorn main:app --reload --port=$port
}

rr(){
    ruff format
    ruff check
}

db(){
    # install package
    pip install sqlalchemy

    # create db.py
    echo 'from sqlalchemy import create_engine' > db.py
    echo 'from sqlalchemy.ext.declarative import declarative_base' >> db.py
    echo 'from sqlalchemy.orm import sessionmaker' >> db.py
    echo '' >> db.py
    echo 'SQLALCHEMY_DATABASE_URL = "sqlite:///./mydb.db"' >> db.py
    echo '' >> db.py
    echo 'engine = create_engine(' >> db.py
    echo '    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}' >> db.py
    echo ')' >> db.py
    echo '' >> db.py
    echo 'SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)' >> db.py
    echo '' >> db.py
    echo 'Base = declarative_base()' >> db.py

    # create models.py
    
    echo 'from db import Base' > models.py
    echo '' >> models.py
    echo 'class DummyModel(Base):' >> models.py
    echo '    pass' >> models.py
    
    # main.py
    echo 'import models' >> main.py
    echo 'from db import engine' >> main.py
    echo 'models.Base.metadata.create_all(bind=engine)' >> main.py
}

alias pi="pip install"
alias pui="pip uninstall"