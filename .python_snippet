venv(){
    version=${1:-3.10}

    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        py -$version -m venv .venv
    else
        python$version -m venv .venv
    fi
    activate

    pip install ruff
	lck ruff.toml
	rr
}

activate(){
    if [ -d "./.venv/Scripts/" ]; then
        . .venv/Scripts/activate
    else
        . .venv/bin/activate
    fi
}

requirements(){
    pip install -r requirements.txt
}

freeze(){
    pip freeze > requirements.txt
}

fast(){
	venv
	activate
	pip install fastapi uvicorn injector pytest python-dotenv
	freeze

	# gen dir
	mkdir controller
	mkdir service
	mkdir service/inf
	mkdir tests
	mkdir config
	mkdir model
	mkdir module
	mkdir module/modules

	# .env
	echo '# Store Secret Value here. Not configuration.ini' > .env

	# DI Config
	echo "import inspect" > module/depends.py
	echo "import pkgutil" >> module/depends.py
	echo "import importlib" >> module/depends.py
	echo "from module import modules" >> module/depends.py
	echo "from injector import Injector, Module" >> module/depends.py
	echo "" >> module/depends.py
	echo "serviceModuels = []" >> module/depends.py
	echo "" >> module/depends.py
	echo "for _, name, is_pkg in pkgutil.iter_modules(modules.__path__):" >> module/depends.py
	echo "    if is_pkg:" >> module/depends.py
	echo "        continue" >> module/depends.py
	echo ""
	echo "    full_module_name = f'{modules.__name__}.{name}'" >> module/depends.py
	echo "    module = importlib.import_module(full_module_name)" >> module/depends.py
	echo ""
	echo "    for attr_name, cls in inspect.getmembers(module, inspect.isclass):" >> module/depends.py
	echo "        if issubclass(cls, Module) and cls is not Module and not inspect.isabstract(cls):" >> module/depends.py
	echo "            serviceModuels.append(cls())" >> module/depends.py
	echo "" >> module/depends.py
	echo "injector = Injector(serviceModuels)" >> module/depends.py

	# configParser
	echo "[ENV]" > config/configuration.ini
	echo "env = DEV" >> config/configuration.ini
	echo "" >> config/configuration.ini
	echo "[DEV]" >> config/configuration.ini
	echo "host = localhost" >> config/configuration.ini
	echo "" >> config/configuration.ini
	echo "[PROD]" >> config/configuration.ini
	echo "host = prodhost" >> config/configuration.ini
	echo "" >> config/configuration.ini
	echo "[COMMON]" >> config/configuration.ini
	echo "model = mymodel" >> config/configuration.ini

	# configurator
	echo "import configparser" > config/configurator.py
	echo "" >> config/configurator.py
	echo "class Configurator:" >> config/configurator.py
	echo "    \"\"\"" >> config/configurator.py
	echo "    Configuration Manager" >> config/configurator.py
	echo "    Get Configuration Value from 'configuration.ini'" >> config/configurator.py
	echo "    \"Never change this file\"" >> config/configurator.py
	echo "    \"\"\"" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "    def __init__(self):" >> config/configurator.py
	echo "        self.parser = configparser.ConfigParser()" >> config/configurator.py
	echo "        self.parser.read('config/configuration.ini')" >> config/configurator.py
	echo "        self.env = self.parser['ENV']['env']" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        self.configs = self.parser[self.env]" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "    def get_env(self, key: str):" >> config/configurator.py
	echo "        \"\"\"" >> config/configurator.py
	echo "        Get Current Environment's Value" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        Args:" >> config/configurator.py
	echo "            key (str): key" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        Returns:" >> config/configurator.py
	echo "            str: value" >> config/configurator.py
	echo "        \"\"\"" >> config/configurator.py
	echo "        return self.parser[self.env][key]" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "    def get_common(self, key: str):" >> config/configurator.py
	echo "        \"\"\"" >> config/configurator.py
	echo "        Get 'Common' Configuration Value" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        Args:" >> config/configurator.py
	echo "            key (str): key" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        Returns:" >> config/configurator.py
	echo "            str: value" >> config/configurator.py
	echo "        \"\"\"" >> config/configurator.py
	echo "        return self.parser['COMMON'][key]" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "    def get_section(self, section: str, key: str):" >> config/configurator.py
	echo "        \"\"\"" >> config/configurator.py
	echo "        Get Section Configuration Value" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        Args:" >> config/configurator.py
	echo "            section (str): section(COMMON, DEV, PROD)" >> config/configurator.py
	echo "            key (str): key" >> config/configurator.py
	echo "" >> config/configurator.py
	echo "        Returns:" >> config/configurator.py
	echo "            str: value" >> config/configurator.py
	echo "        \"\"\"" >> config/configurator.py
	echo "        return self.parser[section][key]" >> config/configurator.py
	echo "" >> config/configurator.py


	# main.py
	echo "from fastapi import FastAPI" > main.py
	echo "" >> main.py
	echo "app = FastAPI()" >> main.py
	echo "" >> main.py

	# sample test
	echo "class Test_SampleService:" > tests/test_sample.py
	echo "    # this will be succeeded" >> tests/test_sample.py
	echo "    def test_hello_success(self):" >> tests/test_sample.py
	echo "        world = 'hello!'" >> tests/test_sample.py
	echo "        assert 'hell' in world" >> tests/test_sample.py
	echo "" >> tests/test_sample.py
	echo "    # this will be failed" >> tests/test_sample.py
	echo "    def test_hello_fail(self):" >> tests/test_sample.py
	echo "        world = 'hello!'" >> tests/test_sample.py
	echo "        assert 'hell' not in world" >> tests/test_sample.py

	# __init__
	echo "" > controller/__init__.py
	echo "" > service/__init__.py
	echo "" > service/inf/__init__.py
	echo "" > config/__init__.py
	echo "" > model/__init__.py
	echo "" > module/__init__.py
	echo "" > module/modules/__init__.py

	rr
}

mvc(){
	mdName="$1"

    if [ -z "$mdName" ]; then
        echo "❌ 모듈이름이 비어 있습니다."
        return 1
    fi

	upperName="$(echo "${mdName:0:1}" | tr '[:lower:]' '[:upper:]')${mdName:1}"
	lowerName="$(echo "${mdName:0:1}" | tr '[:upper:]' '[:lower:]')${mdName:1}"

	# controller
	echo "from fastapi import APIRouter" > controller/${lowerName}Controller.py
	echo "from module.depends import injector" >> controller/${lowerName}Controller.py
	echo "from service.inf.${lowerName}Service import ${upperName}Service" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "router = APIRouter(prefix='/hello', tags=['${lowerName}'])" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "# service" >> controller/${lowerName}Controller.py
	echo "${lowerName}Service = injector.get(${upperName}Service)" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "@router.get('')" >> controller/${lowerName}Controller.py
	echo "def hello():" >> controller/${lowerName}Controller.py
	echo "	return ${lowerName}Service.hello()" >> controller/${lowerName}Controller.py

	# service - inf
	echo "from abc import ABC, abstractmethod" > service/inf/${lowerName}Service.py
	echo "" >> service/inf/${lowerName}Service.py
	echo "" >> service/inf/${lowerName}Service.py
	echo "class ${upperName}Service(ABC):" >> service/inf/${lowerName}Service.py
	echo "	@abstractmethod" >> service/inf/${lowerName}Service.py
	echo "	def hello(self):" >> service/inf/${lowerName}Service.py
	echo "		pass" >> service/inf/${lowerName}Service.py

	# service - Impl
	echo "from config.configurator import Configurator" > service/${lowerName}ServiceImpl.py
	echo "from .inf.${lowerName}Service import ${upperName}Service" >> service/${lowerName}ServiceImpl.py
	echo "" >> service/${lowerName}ServiceImpl.py
	echo "" >> service/${lowerName}ServiceImpl.py
	echo "class ${upperName}ServiceImpl(${upperName}Service):" >> service/${lowerName}ServiceImpl.py
	echo "	def __init__(self, configurator: Configurator):" >> service/${lowerName}ServiceImpl.py
	echo "		self.configurator = configurator" >> service/${lowerName}ServiceImpl.py
	echo "" >> service/${lowerName}ServiceImpl.py
	echo "	def hello(self):" >> service/${lowerName}ServiceImpl.py
	echo "		return {'host': self.configurator.get('host')}" >> service/${lowerName}ServiceImpl.py

	# injector
	echo "from injector import Module, singleton, provider" > module/modules/${lowerName}Module.py
	echo "from config.configurator import Configurator" >> module/modules/${lowerName}Module.py
	echo "" >> module/modules/${lowerName}Module.py
	echo "from service.inf.${lowerName}Service import ${upperName}Service" >> module/modules/${lowerName}Module.py
	echo "from service.${lowerName}ServiceImpl import ${upperName}ServiceImpl" >> module/modules/${lowerName}Module.py
	echo "" >> module/modules/${lowerName}Module.py
	echo "" >> module/modules/${lowerName}Module.py
	echo "class ${upperName}Module(Module):" >> module/modules/${lowerName}Module.py
	echo "	@singleton" >> module/modules/${lowerName}Module.py
	echo "	@provider" >> module/modules/${lowerName}Module.py
	echo "	def ${lowerName}Service(self, configurator: Configurator) -> ${upperName}Service:" >> module/modules/${lowerName}Module.py
	echo "		return ${upperName}ServiceImpl(configurator)" >> module/modules/${lowerName}Module.py

	# main
	echo "from controller import ${lowerName}Controller" >> main.py
	echo "app.include_router(${lowerName}Controller.router)" >> main.py

}

run() {
    port=${1:-8000}
    uvicorn main:app --reload --port=$port
}

rr(){
    ruff format
    ruff check
}

db(){
    # install package
    pip install sqlalchemy

    # create db.py
    echo "from sqlalchemy import create_engine" > db.py
    echo "from sqlalchemy.ext.declarative import declarative_base" >> db.py
    echo "from sqlalchemy.orm import sessionmaker" >> db.py
    echo "" >> db.py
    echo "SQLALCHEMY_DATABASE_URL = 'sqlite:///./mydb.db'" >> db.py
    echo "" >> db.py
    echo "engine = create_engine(" >> db.py
    echo "    SQLALCHEMY_DATABASE_URL, connect_args={'check_same_thread': False}" >> db.py
    echo ")" >> db.py
    echo "" >> db.py
    echo "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)" >> db.py
    echo "" >> db.py
    echo "Base = declarative_base()" >> db.py

    # create models.py
    
    echo "from db import Base" > model/models.py
    echo "" >> model/models.py
    echo "class DummyModel(Base):" >> model/models.py
    echo "    pass" >> model/models.py
    
    # main.py
    echo "from model.models import models" >> main.py
    echo "from db import engine" >> main.py
    echo "models.Base.metadata.create_all(bind=engine)" >> main.py
}

alias pi="pip install"
alias pui="pip uninstall"