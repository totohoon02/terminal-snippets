venv(){
    version=${1:-3.10}

    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        py -$version -m venv .venv
    else
        python$version -m venv .venv
    fi
    activate

    pip install ruff
	lck ruff.toml
	rr
}

activate(){
    if [ -d "./.venv/Scripts/" ]; then
        . .venv/Scripts/activate
    else
        . .venv/bin/activate
    fi
}

requirements(){
    pip install -r requirements.txt
}

freeze(){
    pip freeze > requirements.txt
}

fast(){
	venv
	activate
	pip install fastapi uvicorn injector pytest python-dotenv
	freeze

	# gen dir
	mkdir controller
	mkdir service
	mkdir service/inf
	mkdir tests
	mkdir _config
	mkdir model
	mkdir _module
	mkdir _module/modules

	# .env
	echo '# Store Secret Value here. Not configuration.ini' > .env

	# DI Config
	echo "import inspect" > _module/depends.py
	echo "import pkgutil" >> _module/depends.py
	echo "import importlib" >> _module/depends.py
	echo "from _module import modules" >> _module/depends.py
	echo "from injector import Injector, Module" >> _module/depends.py
	echo "" >> _module/depends.py
	echo "serviceModuels = []" >> _module/depends.py
	echo "" >> _module/depends.py
	echo "for _, name, is_pkg in pkgutil.iter_modules(modules.__path__):" >> _module/depends.py
	echo "    if is_pkg:" >> _module/depends.py
	echo "        continue" >> _module/depends.py
	echo ""
	echo "    full_module_name = f'{modules.__name__}.{name}'" >> _module/depends.py
	echo "    _module = importlib.import_module(full_module_name)" >> _module/depends.py
	echo ""
	echo "    for attr_name, cls in inspect.getmembers(_module, inspect.isclass):" >> _module/depends.py
	echo "        if issubclass(cls, Module) and cls is not Module and not inspect.isabstract(cls):" >> _module/depends.py
	echo "            serviceModuels.append(cls())" >> _module/depends.py
	echo "" >> _module/depends.py
	echo "injector = Injector(serviceModuels)" >> _module/depends.py

	# configParser
	echo "[ENV]" > configuration.ini
	echo "env = DEV" >> configuration.ini
	echo "" >> configuration.ini
	echo "[DEV]" >> configuration.ini
	echo "host = localhost" >> configuration.ini
	echo "db_host = localhost" >> configuration.ini
	echo "db_user = root" >> configuration.ini
	echo "db_password = root" >> configuration.ini
	echo "db_name = climbSettings" >> configuration.ini
	echo "" >> configuration.ini
	echo "[PROD]" >> configuration.ini
	echo "host = prodhost" >> configuration.ini
	echo "db_host = mysql" >> configuration.ini
	echo "db_user = root" >> configuration.ini
	echo "db_password = root" >> configuration.ini
	echo "db_name = climbSettings" >> configuration.ini
	echo "" >> configuration.ini
	echo "[COMMON]" >> configuration.ini
	echo "model = mymodel" >> configuration.ini

	# configurator
	echo "import os" > _config/configurator.py
	echo "import configparser" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "class Configurator:" >> _config/configurator.py
	echo "	\"\"\"" >> _config/configurator.py
	echo "	Configuration Manager" >> _config/configurator.py
	echo "	Get Configuration Value from 'configuration.ini'" >> _config/configurator.py
	echo "	\"Never change this file\"" >> _config/configurator.py
	echo "	\"\"\"" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "	@staticmethod" >> _config/configurator.py
	echo "	def __get_parser():" >> _config/configurator.py
	echo "		base_dir = os.path.dirname(os.path.abspath(__file__))" >> _config/configurator.py
	echo "		config_path = os.path.join(base_dir, '..', 'configuration.ini')" >> _config/configurator.py
	echo "		config_path = os.path.abspath(config_path)" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		parser = configparser.ConfigParser()" >> _config/configurator.py
	echo "		parser.read(config_path)" >> _config/configurator.py
	echo "		return parser" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "	@staticmethod" >> _config/configurator.py
	echo "	def get_current_env():" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		Get current environment name" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Returns:" >> _config/configurator.py
	echo "			str: environment name" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		return Configurator.__get_parser()[\"ENV\"][\"env\"]" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "	@staticmethod" >> _config/configurator.py
	echo "	def get_env_value(key: str):" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		Get Current Environment's(DEV, PROD) Value" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Args:" >> _config/configurator.py
	echo "		    key (str): key" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Returns:" >> _config/configurator.py
	echo "		    str: value" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		env = Configurator.get_current_env()" >> _config/configurator.py
	echo "		return Configurator.__get_parser()[env][key]" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "	@staticmethod" >> _config/configurator.py
	echo "	def get_common_value(key: str):" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		Get 'Common' Configuration Value" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Args:" >> _config/configurator.py
	echo "		    key (str): key" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Returns:" >> _config/configurator.py
	echo "		    str: value" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		return Configurator.__get_parser()[\"COMMON\"][key]" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "	@staticmethod" >> _config/configurator.py
	echo "	def get_section_value(section: str, key: str):" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		Get Section Configuration Value" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Args:" >> _config/configurator.py
	echo "		    section (str): section(COMMON, DEV, PROD)" >> _config/configurator.py
	echo "		    key (str): key" >> _config/configurator.py
	echo "" >> _config/configurator.py
	echo "		Returns:" >> _config/configurator.py
	echo "		    str: value" >> _config/configurator.py
	echo "		\"\"\"" >> _config/configurator.py
	echo "		return Configurator.__get_parser()[section][key]" >> _config/configurator.py
	echo "" >> _config/configurator.py

	# routeConfiurator
	echo "from pathlib import Path" > _config/routeConfiurator.py
	echo "import importlib" >> _config/routeConfiurator.py
	echo "" >> _config/routeConfiurator.py
	echo "def include_routers(app):" >> _config/routeConfiurator.py
	echo "    controller_dir = Path(__file__).parent.parent / 'controller'" >> _config/routeConfiurator.py
	echo "" >> _config/routeConfiurator.py
	echo "    for file_path in controller_dir.glob('*Controller.py'):" >> _config/routeConfiurator.py
	echo "        module_name = file_path.stem" >> _config/routeConfiurator.py
	echo "        module_path = f'controller.{module_name}'" >> _config/routeConfiurator.py
	echo "" >> _config/routeConfiurator.py
	echo "        module = importlib.import_module(module_path)" >> _config/routeConfiurator.py
	echo "" >> _config/routeConfiurator.py
	echo "        if hasattr(module, 'router'):" >> _config/routeConfiurator.py
	echo "            app.include_router(module.router)" >> _config/routeConfiurator.py

	# main.py
	echo "from fastapi import FastAPI" > main.py
	echo "from _config.routeConfiurator import include_routers" >> main.py
	echo "" >> main.py
	echo "app = FastAPI()" >> main.py
	echo "" >> main.py
	echo "include_routers(app)" >> main.py
	echo "" >> main.py

	# sample test
	echo "class Test_SampleService:" > tests/test_sample.py
	echo "    # this will be succeeded" >> tests/test_sample.py
	echo "    def test_hello_success(self):" >> tests/test_sample.py
	echo "        world = 'hello!'" >> tests/test_sample.py
	echo "        assert 'hell' in world" >> tests/test_sample.py
	echo "" >> tests/test_sample.py
	echo "    # this will be failed" >> tests/test_sample.py
	echo "    def test_hello_fail(self):" >> tests/test_sample.py
	echo "        world = 'hello!'" >> tests/test_sample.py
	echo "        assert 'hell' not in world" >> tests/test_sample.py

	# __init__
	echo "" > controller/__init__.py
	echo "" > service/__init__.py
	echo "" > service/inf/__init__.py
	echo "" > _config/__init__.py
	echo "" > model/__init__.py
	echo "" > _module/__init__.py
	echo "" > _module/modules/__init__.py

	# readme
	echo "# Fast" > README.md
	rr
}

mvc(){
	mdName="$1"

    if [ -z "$mdName" ]; then
        echo "❌ 모듈이름이 비어 있습니다."
        return 1
    fi

	upperName="$(echo "${mdName:0:1}" | tr '[:lower:]' '[:upper:]')${mdName:1}"
	lowerName="$(echo "${mdName:0:1}" | tr '[:upper:]' '[:lower:]')${mdName:1}"

	# controller
	echo "from fastapi import APIRouter" > controller/${lowerName}Controller.py
	echo "from _module.depends import injector" >> controller/${lowerName}Controller.py
	echo "from service.inf.${lowerName}Service import ${upperName}Service" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "router = APIRouter(prefix='/${lowerName}', tags=['${lowerName}'])" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "# service" >> controller/${lowerName}Controller.py
	echo "${lowerName}Service = injector.get(${upperName}Service)" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "" >> controller/${lowerName}Controller.py
	echo "@router.get('')" >> controller/${lowerName}Controller.py
	echo "def hello():" >> controller/${lowerName}Controller.py
	echo "	return ${lowerName}Service.hello()" >> controller/${lowerName}Controller.py

	# service - inf
	echo "from abc import ABC, abstractmethod" > service/inf/${lowerName}Service.py
	echo "" >> service/inf/${lowerName}Service.py
	echo "" >> service/inf/${lowerName}Service.py
	echo "class ${upperName}Service(ABC):" >> service/inf/${lowerName}Service.py
	echo "	@abstractmethod" >> service/inf/${lowerName}Service.py
	echo "	def hello(self):" >> service/inf/${lowerName}Service.py
	echo "		pass" >> service/inf/${lowerName}Service.py

	# service - Impl
	echo "from .inf.${lowerName}Service import ${upperName}Service" >> service/${lowerName}ServiceImpl.py
	echo "from _config.configurator import Configurator" >> service/${lowerName}ServiceImpl.py
	echo "" >> service/${lowerName}ServiceImpl.py
	echo "" >> service/${lowerName}ServiceImpl.py
	echo "class ${upperName}ServiceImpl(${upperName}Service):" >> service/${lowerName}ServiceImpl.py
	echo "	def __init__(self):" >> service/${lowerName}ServiceImpl.py
	echo "		pass" >> service/${lowerName}ServiceImpl.py
	echo "" >> service/${lowerName}ServiceImpl.py
	echo "	def hello(self):" >> service/${lowerName}ServiceImpl.py
	echo "		return {'host': Configurator.get_env_value('host')}" >> service/${lowerName}ServiceImpl.py

	# injector
	echo "from injector import Module, singleton, provider" > _module/modules/${lowerName}Module.py
	echo "" >> _module/modules/${lowerName}Module.py
	echo "from service.inf.${lowerName}Service import ${upperName}Service" >> _module/modules/${lowerName}Module.py
	echo "from service.${lowerName}ServiceImpl import ${upperName}ServiceImpl" >> _module/modules/${lowerName}Module.py
	echo "" >> _module/modules/${lowerName}Module.py
	echo "" >> _module/modules/${lowerName}Module.py
	echo "class ${upperName}Module(Module):" >> _module/modules/${lowerName}Module.py
	echo "	@singleton" >> _module/modules/${lowerName}Module.py
	echo "	@provider" >> _module/modules/${lowerName}Module.py
	echo "	def ${lowerName}Service(self) -> ${upperName}Service:" >> _module/modules/${lowerName}Module.py
	echo "		return ${upperName}ServiceImpl()" >> _module/modules/${lowerName}Module.py
}

# 반대 함수: rmvc
rmvc() {
    mdName="$1"
    if [ -z "$mdName" ]; then
        echo "❌ 모듈이름이 비어 있습니다."
        return 1
    fi

    # 이름 변환
    upperName="$(echo "${mdName:0:1}" | tr '[:lower:]' '[:upper:]')${mdName:1}"
    lowerName="$(echo "${mdName:0:1}" | tr '[:upper:]' '[:lower:]')${mdName:1}"

    # 생성된 파일 삭제
    rm -f "controller/${lowerName}Controller.py"
    rm -f "service/inf/${lowerName}Service.py"
    rm -f "service/${lowerName}ServiceImpl.py"
    rm -f "_module/modules/${lowerName}Module.py"

    echo "🗑️  '${mdName}' 모듈 관련 파일 삭제가 완료되었습니다."
}


run() {
    port=${1:-8080}
    uvicorn main:app --reload --port=$port
}

rr(){
    ruff format
    ruff check
}

db(){
    # install package
    pip install sqlalchemy pymysql cryptography

    # create db.py
    echo 'from sqlalchemy import create_engine' > db.py
	echo 'from sqlalchemy.ext.declarative import declarative_base' >> db.py
	echo 'from sqlalchemy.orm import sessionmaker' >> db.py
	echo 'from _config.configurator import Configurator' >> db.py
	echo 'from contextlib import contextmanager' >> db.py
	echo '' >> db.py
	echo '# 데이터베이스 연결 설정' >> db.py
	echo 'DB_HOST = Configurator.get_env_value("db_host")' >> db.py
	echo 'DB_USER = Configurator.get_env_value("db_user")' >> db.py
	echo 'DB_PASSWORD = Configurator.get_env_value("db_password")' >> db.py
	echo 'DB_NAME = Configurator.get_env_value("db_name")' >> db.py
	echo '' >> db.py
	echo '# SQLAlchemy 엔진 생성' >> db.py
	echo 'DATABASE_URL = f"mysql+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}"' >> db.py
	echo 'engine = create_engine(DATABASE_URL)' >> db.py
	echo '' >> db.py
	echo '# 세션 생성' >> db.py
	echo 'SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)' >> db.py
	echo '' >> db.py
	echo '# Base 클래스 생성' >> db.py
	echo 'Base = declarative_base()' >> db.py
	echo '' >> db.py
	echo '# 데이터베이스 세션 가져오기' >> db.py
	echo '@contextmanager' >> db.py
	echo 'def get_db():' >> db.py
	echo '    db = SessionLocal()' >> db.py
	echo '    try:' >> db.py
	echo '        yield db' >> db.py
	echo '    finally:' >> db.py
	echo '        db.close()' >> db.py

	# table.py
	echo "from db import Base" > model/table.py
	echo "" >> model/table.py
	echo "class SampleTable(Base):" >> model/table.py
	echo "    __tablename__ = 'sample'" >> model/table.py

    # main.py
    sed -i '/from _config.routeConfiurator import include_routers/a from db import engine, Base' main.py
    sed -i '/from db import engine, Base/a from model.table import *' main.py
    echo "Base.metadata.create_all(bind=engine)" >> main.py
}

inf() {
  if [ -z "$1" ]; then
    echo "❌ 오류: 서비스 이름을 인자로 전달해야 합니다." >&2
    echo "사용법: inf <ServiceName>" >&2
    return 1
  fi

  local name="$1"
  local impl_path="./service/${name}ServiceImpl.py"
  local inf_path="./service/inf/${name}Service.py"

  if [ ! -f "$impl_path" ]; then
    echo "❌ 오류: 구현 파일이 존재하지 않습니다: $impl_path" >&2
    return 1
  fi

  local class_name
  class_name="$(grep -E '^class[ ]+[A-Za-z_][A-Za-z0-9_]*' "$impl_path" \
    | sed -E 's/^class[ ]+([A-Za-z_][A-Za-z0-9_]*).*/\1/' \
    | head -n1)"

  if [ -z "$class_name" ]; then
    echo "❌ 오류: 클래스 정의를 찾을 수 없습니다: $impl_path" >&2
    return 1
  fi

  local interface_class="${class_name%Impl}"
  interface_class="$(tr '[:lower:]' '[:upper:]' <<< "${interface_class:0:1}")${interface_class:1}"

  local method_lines
  method_lines="$(grep -E '^[[:space:]]+def [a-zA-Z_][a-zA-Z0-9_]*\(.*\):' "$impl_path" \
    | grep -v '__init__')"

	{
		echo "from abc import ABC, abstractmethod"
		echo
		echo "class $interface_class(ABC):"
		echo

	while IFS= read -r line; do
		sig="$(echo "$line" | sed -E 's/^[[:space:]]+//')"
		sig="$(echo "$sig" | sed -E 's/^def ([a-zA-Z_][a-zA-Z0-9_]*)\((.*)\):.*/def \1(\2):/')"
		params="$(echo "$sig" | sed -E 's/^def [a-zA-Z_][a-zA-Z0-9_]*\((.*)\):/\1/')"
		params="$(echo "$params" | sed -E 's/:[^,)=]+//g' | sed -E 's/=[^,)=]+//g' | sed -E 's/ +/ /g' | sed -E 's/^ | $//g')"
		# 끝에 괄호가 남으면 제거
		params="$(echo "$params" | sed -E 's/\)$//')"
		func_name="$(echo "$sig" | sed -E 's/^def ([a-zA-Z_][a-zA-Z0-9_]*)\(.*$/\1/')"
		sig="def $func_name($params):"
		# 혹시라도 괄호 연속 정리
		sig="$(echo "$sig" | sed -E 's/\)+/)/g')"

		echo "    @abstractmethod"
		echo "    $sig"
		echo "        pass"
		echo
	done <<< "$method_lines"
	} > "$inf_path"

    echo "✅ 인터페이스 파일 생성 완료: $inf_path"
}



alias pi="pip install"
alias pui="pip uninstall"