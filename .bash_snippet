pk() {
    port=$1

    if [[ -z "$port" ]]; then
        echo "Usage: $0 <port>"
        exit 1
    fi

    pid_to_kill=$(netstat -tuln 2>/dev/null | grep ":$port" | awk '{print $7}' | cut -d'/' -f1)

    if [[ -n "$pid_to_kill" ]]; then
        echo "killed process on $port"
        kill -9 "$pid_to_kill"
    else
        echo "No process found on $port"
    fi
}

host() {
    if [ -z "$1" ]; then
        echo "Usage: host <port> [--secret]"
        return 1
    fi

    local port="$1"
    local url="http://localhost:$port"
    local browser_flag=""

    if [[ "$2" == "--secret" || "$2" == "-s" ]]; then
        browser_flag="--incognito"
    fi

    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
        start chrome $browser_flag "$url"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if [ -n "$browser_flag" ]; then
            open -a "Google Chrome" --new --args "$browser_flag" "$url"
        else
            open -a "Google Chrome" "$url"
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -n "$browser_flag" ]; then
            google-chrome "$browser_flag" "$url" &>/dev/null &
        else
            xdg-open "$url"
        fi
    else
        echo "Unsupported operating system: $OSTYPE"
        return 1
    fi
}


culst(){
    if [ -z "$1" ]; then
        echo "Usage: cost <port>"
        return 1
    fi

    local port="$1"
    curl "http://localhost:$port"
}

rcopy(){
    reversed=$(echo $1 | awk '{ for(i=length; i>0; i--) printf "%s", substr($0, i, 1); print "" }')
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v xclip &> /dev/null; then
            echo "$reversed" | xclip -selection clipboard
        else
            echo "xclip이 설치되어 있지 않습니다. 설치 후 사용하세요."
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "$reversed" | pbcopy
    elif [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" ]]; then
        echo "$reversed" | clip
    else
        echo "Not supported OS"
    fi
}

after(){
    if [ -z "$1" ]; then
        echo "start 20 rest 8"
        return 1
    fi
    
    if [ -n "$2" ]; then
        year=$(date +%Y)
        base_date="$year-$2"
    else
        base_date=$(date +%Y-%m-%d)
    fi
    
    future_date=$(date -d "$base_date +$1 days" +%Y-%m-%d)
    echo $future_date
}

lck(){
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo "locker/"
        echo "      |--chromaConfig.yml"
        echo "      |--elasticConfig.yml"
        echo "      |--ollamaConfig.yml"
        echo "      |--sqliteConfig.yml"
        echo "      |--swaggerConfig.yml"
        echo "      |--ruff.toml"
        echo "      |--docker"
        echo "         |--chromadb"
        echo "         |--elastic8"
        echo "         |--nginx"
        echo "         |--ollama"
        echo "         |--airflow"
        echo "         |--mysql"
        echo "         |--mongodb"
        echo ""
        echo "##### Usage #####"
        echo "lck chromaConfig.yml"
        echo "lck -d chromadb"
        echo "##### Usage #####"
        return 1
    fi
    
    if [ -z "$1" ]; then
        echo "Usage: lck <filename | docker> <docker:filename>"
        return 1
    fi

    if [[ "$1" == "--docker" || "$1" == "-d" ]]; then
        if [ -z "$2" ]; then
            echo "Not specified Docker"
            return 1
        else
            local dir="$2"
            mkdir "$dir"
            curl https://raw.githubusercontent.com/totohoon02/locker/refs/heads/main/docker/$dir/docker-compose.yml > ./"$dir"/docker-compose.yml
        fi
    else
        curl https://raw.githubusercontent.com/totohoon02/locker/refs/heads/main/"$1" > "$1" 
    fi
}

alias sb="source ~/.bash_profile"
alias sz="source ~/.zshrc"