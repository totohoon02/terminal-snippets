pk() {
    port=$1

    if [[ -z "$port" ]]; then
        echo "Usage: $0 <port>"
        exit 1
    fi

    pid_to_kill=$(netstat -tuln 2>/dev/null | grep ":$port" | awk '{print $7}' | cut -d'/' -f1)

    if [[ -n "$pid_to_kill" ]]; then
        echo "killed process on $port"
        kill -9 "$pid_to_kill"
    else
        echo "No process found on $port"
    fi
}

host() {
    if [ -z "$1" ]; then
        echo "Usage: host <port> [--secret]"
        return 1
    fi

    local port="$1"
    local url="http://localhost:$port"
    local browser_flag=""

    if [[ "$2" == "--secret" || "$2" == "-s" ]]; then
        case "$OSTYPE" in
            msys|cygwin|win32)
                browser_flag="--incognito" ;;
            darwin*)
                browser_flag="--incognito" ;;
            linux-gnu*)
                browser_flag="--incognito" ;; # 기본적으로 Chrome 기준
        esac
    fi

    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
        start chrome "$browser_flag" "$url"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        open -a "Google Chrome" --args "$browser_flag" "$url"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        xdg-open "$url" # xdg-open은 기본 브라우저를 사용함
    else
        echo "Unsupported operating system: $OSTYPE"
        return 1
    fi
}

culst(){
    if [ -z "$1" ]; then
        echo "Usage: cost <port>"
        return 1
    fi

    local port="$1"
    curl "http://localhost:$port"
}

rcopy(){
    reversed=$(echo $1 | awk '{ for(i=length; i>0; i--) printf "%s", substr($0, i, 1); print "" }')
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v xclip &> /dev/null; then
            echo "$reversed" | xclip -selection clipboard
        else
            echo "xclip이 설치되어 있지 않습니다. 설치 후 사용하세요."
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "$reversed" | pbcopy
    elif [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" ]]; then
        echo "$reversed" | clip
    else
        echo "Not supported OS"
    fi
}

after(){
    if [ -z "$1" ]; then
        echo "start 20 rest 8"
        return 1
    fi
    
    if [ -n "$2" ]; then
        year=$(date +%Y)
        base_date="$year-$2"
    else
        base_date=$(date +%Y-%m-%d)
    fi
    
    future_date=$(date -d "$base_date +$1 days" +%Y-%m-%d)
    echo $future_date
}
